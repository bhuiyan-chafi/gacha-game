{
	"info": {
		"_postman_id": "57501def-84d4-4f93-9911-af945ca5f6bc",
		"name": "Submission_NOV_22",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39569857"
	},
	"item": [
		{
			"name": "ApiGatewayOne",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains login success message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property(\"detail\", \"Login successful.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"Chafi001\",\n    \"password\":\"chafi001password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_one}}/auth-service/user/login/",
									"host": [
										"{{api_gateway_one}}"
									],
									"path": [
										"auth-service",
										"user",
										"login",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains login success message\", function () {",
											"    const responseJson = pm.response.json();",
											"    pm.expect(responseJson).to.have.property(\"detail\", \"Logout successful.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"Chafi001\",\n    \"password\":\"chafi001password\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_one}}/auth-service/user/1/logout/",
									"host": [
										"{{api_gateway_one}}"
									],
									"path": [
										"auth-service",
										"user",
										"1",
										"logout",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Tests",
					"item": [
						{
							"name": "create-user-duplicate-username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to ensure the response status is 400",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Parse the JSON response body",
											"let responseBody = pm.response.json();",
											"",
											"// Test to check the error message for \"username\" field",
											"pm.test(\"Username field error is correct\", function () {",
											"    pm.expect(responseBody).to.have.property(\"username\");",
											"    pm.expect(responseBody.username).to.be.an(\"array\").that.includes(\"This field must be unique.\");",
											"});",
											"",
											"// If both tests pass, mark the test as passed"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"player001\",\n    \"password\":\"Player001@password\",\n    \"status\":\"inactive\",\n    \"role\":\"player\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_one}}/auth-service/create/",
									"host": [
										"{{api_gateway_one}}"
									],
									"path": [
										"auth-service",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create-user-missing-field",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to ensure the response status is 400",
											"pm.test(\"Status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"// Parse the JSON response body",
											"let responseBody = pm.response.json();",
											"",
											"// Define the fields we expect errors for",
											"let expectedFields = [\"username\", \"password\", \"status\", \"role\"];",
											"",
											"// Test to check if at least one expected field has an error message",
											"pm.test(\"At least one expected field has an error message\", function () {",
											"    // Initialize a flag to track if any field has an error",
											"    let hasError = false;",
											"",
											"    // Iterate over the expected fields",
											"    expectedFields.forEach(function (field) {",
											"        // Check if the field exists and is an array with at least one error message",
											"        if (responseBody[field] && Array.isArray(responseBody[field]) && responseBody[field].length > 0) {",
											"            hasError = true; // Set the flag to true if the condition is met",
											"        }",
											"    });",
											"",
											"    // Assert that at least one field has an error",
											"    pm.expect(hasError).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"username\":\"\",\n    \"password\":\"\",\n    \"status\":\"\",\n    \"role\":\"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_one}}/auth-service/create/",
									"host": [
										"{{api_gateway_one}}"
									],
									"path": [
										"auth-service",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user-not-found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Test to ensure the response status is 404",
											"pm.test(\"Status code is 404\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"// Parse the JSON response body",
											"let responseBody = pm.response.json();",
											"",
											"// Test to check if the response body contains the correct detail message",
											"pm.test(\"Response body contains correct error detail\", function () {",
											"    pm.expect(responseBody).to.have.property(\"detail\");",
											"    pm.expect(responseBody.detail).to.eql(\"No User matches the given query.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_one}}/auth-service/4/details/",
									"host": [
										"{{api_gateway_one}}"
									],
									"path": [
										"auth-service",
										"4",
										"details",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "gateway-test",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/test/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"test",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "get-user-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should have status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" ",
									"pm.test(\"Response contains user details\", function () {",
									"    const jsonResponse = pm.response.json();",
									"    pm.expect(jsonResponse).to.have.property('id');",
									"    pm.expect(jsonResponse).to.have.property('username');",
									"    pm.expect(jsonResponse).to.have.property('status');",
									"    pm.expect(jsonResponse).to.have.property('role');",
									"    pm.expect(jsonResponse).to.have.property('created_at');",
									"    pm.expect(jsonResponse).to.have.property('updated_at');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/1/details/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"1",
								"details",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "put-user-details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should have status 200 OK\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"player001\",\n    \"status\":\"active\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/1/details/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"1",
								"details",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "user-delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response should have status 204 OK\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									" "
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "username",
									"value": "chafi06_mod",
									"type": "text"
								},
								{
									"key": "status",
									"value": "inactive",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/3/delete/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"3",
								"delete",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "create-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Check if the status code is 201",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									" ",
									"// Check if the response contains the expected detail message",
									"pm.test(\"Response contains success message\", function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"detail\", \"User has been created successfully.\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\":\"player003\",\n    \"password\":\"Player003@password\",\n    \"status\":\"active\",\n    \"role\":\"player\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/create/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"create",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "user-list",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200); // Check that the status code is 200",
									"});",
									" ",
									"pm.test(\"Response time is acceptable\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000); // Response time should be < 1000ms",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_gateway_one}}/auth-service/list/",
							"host": [
								"{{api_gateway_one}}"
							],
							"path": [
								"auth-service",
								"list",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "ApiGateWayTwo",
			"item": [
				{
					"name": "Players",
					"item": [
						{
							"name": "Tests",
							"item": [
								{
									"name": "create-player-check-uniqueness",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to ensure the response status is 400",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"// Parse the JSON response body",
													"let responseBody = pm.response.json();",
													"",
													"// Define the expected fields and their respective error messages",
													"let expectedErrors = {",
													"    \"email_address\": \"Email address must be unique.\",",
													"    \"phone_number\": \"Phone number must be unique.\",",
													"    \"bank_details\": \"player with this bank details already exists.\",",
													"    \"current_balance\": \"Ensure this value is greater than or equal to 0.0.\"",
													"};",
													"",
													"// Test to ensure at least one expected error is present",
													"pm.test(\"At least one expected error is present where username, email, phone or balance is in the wrong format. Plesae check the response body.\", function () {",
													"    let hasError = false;",
													"",
													"    // Check if at least one expected field exists in the response with the correct message",
													"    Object.keys(expectedErrors).forEach(function (field) {",
													"        if (responseBody[field] && Array.isArray(responseBody[field]) && responseBody[field].includes(expectedErrors[field])) {",
													"            hasError = true;",
													"        }",
													"    });",
													"",
													"    // Assert that at least one error is present",
													"    pm.expect(hasError).to.be.true;",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"user_id\": \"1\",\n    \"first_name\": \"Player\",\n    \"last_name\": \"One\",\n    \"email_address\": \"player1@outlook.com\",\n    \"phone_number\": \"3533299792\",\n    \"bank_details\": \"IT1234567893\",\n    \"current_balance\": -1\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_gateway_two}}/player/create/",
											"host": [
												"{{api_gateway_two}}"
											],
											"path": [
												"player",
												"create",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "get-player-details-not-found",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test to ensure the response status is 404",
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"// Parse the JSON response body",
													"let responseBody = pm.response.json();",
													"",
													"// Test to check if the response body contains the correct detail message",
													"pm.test(\"Response body contains correct error detail\", function () {",
													"    pm.expect(responseBody).to.have.property(\"detail\");",
													"    pm.expect(responseBody.detail).to.eql(\"No Player matches the given query.\");",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{api_gateway_two}}/player/200/details/",
											"host": [
												"{{api_gateway_two}}"
											],
											"path": [
												"player",
												"200",
												"details",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create-player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"user_id\": 3,\n    \"first_name\": \"Player\",\n    \"last_name\": \"Three\",\n    \"email_address\": \"player3@outlook.com\",\n    \"phone_number\": \"3533299794\",\n    \"bank_details\": \"IT1234567895\",\n    \"current_balance\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/player/create/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"player",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update-player-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											" ",
											"pm.test(\"Response message is correct\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"player updated successfully\");",
											"});",
											" ",
											"pm.test(\"Response time is acceptable\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(500); // Adjust based on your performance expectations",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"first_name\": \"Player\",\n    \"last_name\": \"One\",\n    \"email_address\": \"player1@outlook.com\",\n    \"phone_number\": \"3533299792\",\n    \"bank_details\": \"IT1234567893\",\n    \"current_balance\": 1000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/player/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"player",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get-player-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"// Parse the response JSON",
											"let responseData = pm.response.json();",
											" ",
											"// Test that the response contains player details",
											"pm.test(\"Response contains expected player details\", function () {",
											"    pm.expect(responseData).to.be.an(\"object\"); // Ensure the response is a JSON object",
											" ",
											"    // Validate the presence of specific fields in the response",
											"    pm.expect(responseData).to.have.property(\"id\").that.is.a(\"number\");",
											"    pm.expect(responseData).to.have.property(\"first_name\").that.is.a(\"string\");",
											"    pm.expect(responseData).to.have.property(\"last_name\").that.is.a(\"string\");",
											"    pm.expect(responseData).to.have.property(\"email_address\").that.is.a(\"string\");",
											"    pm.expect(responseData).to.have.property(\"phone_number\").that.is.a(\"string\");",
											"    pm.expect(responseData).to.have.property(\"bank_details\").that.is.a(\"string\");",
											"    pm.expect(responseData).to.have.property(\"user_id\").that.is.a(\"number\");",
											"    pm.expect(responseData).to.have.property(\"current_balance\").that.is.a(\"number\");",
											"});",
											" ",
											"// Log the response for debugging purposes",
											"console.log(\"Response:\", responseData);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_two}}/player/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"player",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-player",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/player/2/delete/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"player",
										"2",
										"delete",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "player-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/player/list/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"player",
										"list",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Admin",
					"item": [
						{
							"name": "create-admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check if the status code is 201",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"user_id\": 3,\n  \"first_name\": \"Admin\",\n  \"last_name\": \"One\",\n  \"email_address\": \"admin@test.com\",\n  \"phone_number\": \"3533299790\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/admin/create/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"admin",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "admin-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body contains expected structure\", function () {",
											"    const responseJson = pm.response.json();",
											"",
											"    // Check that all required keys are present",
											"    const requiredKeys = [\"id\", \"first_name\", \"last_name\", \"email_address\", \"phone_number\", \"user_id\"];",
											"    requiredKeys.forEach(function (key) {",
											"        pm.expect(responseJson).to.have.property(key);",
											"    });",
											"",
											"    // Optional: Check data types of each field",
											"    pm.test(\"Field types are correct\", function () {",
											"        pm.expect(responseJson.id).to.be.a(\"number\");",
											"        pm.expect(responseJson.first_name).to.be.a(\"string\");",
											"        pm.expect(responseJson.last_name).to.be.a(\"string\");",
											"        pm.expect(responseJson.email_address).to.be.a(\"string\");",
											"        pm.expect(responseJson.phone_number).to.be.a(\"string\");",
											"        pm.expect(responseJson.user_id).to.be.a(\"number\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_two}}/admin/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"admin",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update-admin-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const responseJson = pm.response.json();",
											"",
											"    // Check that 'detail' key exists",
											"    pm.expect(responseJson).to.have.property(\"detail\", \"Admin updated successfully.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"first_name\": \"Admin\",\n    \"last_name\": \"One\",\n    \"email_address\": \"admin@test.com\",\n    \"phone_number\": \"3533299790\",\n    \"user_id\": 3\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/admin/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"admin",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/admin/1/delete/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"admin",
										"1",
										"delete",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "admin-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/admin/list/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"admin",
										"list",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GachaService",
					"item": [
						{
							"name": "gacha-list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/gacha/list/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"gacha",
										"list",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create-gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201 Created\", function () {",
											"    pm.response.to.have.status(201); // Checking if the response status is 201 Created",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Azir\",\n    \"rarity\": 5,\n    \"inventory\": 100,\n    \"price\": 15,\n    \"status\": \"active\",\n    \"description\": \"Azir is .....\",\n    \"image\": \"azir.png\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/gacha/create/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"gacha",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "gacha-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body contains expected structure and data types\", function () {",
											"    const responseJson = pm.response.json();",
											"",
											"    // Check that all required keys are present",
											"    const requiredKeys = [\"id\", \"name\", \"rarity\", \"inventory\", \"price\", \"status\", \"created_at\", \"updated_at\"];",
											"    requiredKeys.forEach(function (key) {",
											"        pm.expect(responseJson).to.have.property(key);",
											"    });",
											"",
											"    // Validate data types",
											"    pm.test(\"Field types are correct\", function () {",
											"        pm.expect(responseJson.id).to.be.a(\"number\");",
											"        pm.expect(responseJson.name).to.be.a(\"string\");",
											"        pm.expect(responseJson.rarity).to.be.a(\"number\");",
											"        pm.expect(responseJson.inventory).to.be.a(\"number\");",
											"        pm.expect(responseJson.price).to.be.a(\"number\");",
											"        pm.expect(responseJson.status).to.be.a(\"string\");",
											"        pm.expect(responseJson.created_at).to.be.a(\"string\");",
											"        pm.expect(responseJson.updated_at).to.be.a(\"string\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_two}}/gacha/2/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"gacha",
										"2",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update-gacha-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains success message\", function () {",
											"    const responseJson = pm.response.json();",
											"",
											"    // Check that 'detail' key exists",
											"    pm.expect(responseJson).to.have.property(\"detail\", \"User updated successfully.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Ahri\",\n    \"rarity\": 5,\n    \"inventory\": 100,\n    \"price\": 15,\n    \"status\": \"inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/gacha/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"gacha",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-gacha",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204 (OK)\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/gacha/1/delete/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"gacha",
										"1",
										"delete",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "SystemVariableService",
					"item": [
						{
							"name": "list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // Check that the status code is 200",
											"});",
											" ",
											"pm.test(\"Response time is acceptable\", function () {",
											"    pm.expect(pm.response.responseTime).to.be.below(1000); // Response time should be < 1000ms",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_two}}/system-variables/list/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"system-variables",
										"list",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "create",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											" ",
											"// Check if the response contains the expected detail message",
											"pm.test(\"Response contains success message\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"detail\", \"System variable created successfully.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\" : \"currency_name\",\n    \"value\" : \"Runes\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/system-variables/create/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"system-variables",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-details",
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "name",
											"value": "supported_currency",
											"type": "text"
										},
										{
											"key": "value",
											"value": "rune",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{system_variable_service}}/1/details/",
									"host": [
										"{{system_variable_service}}"
									],
									"path": [
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "get-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200 (OK)\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body contains expected structure and data types\", function () {",
											"    const responseJson = pm.response.json();",
											"",
											"    // Check that all required keys are present",
											"    const requiredKeys = [\"id\", \"name\", \"value\"];",
											"    requiredKeys.forEach(function (key) {",
											"        pm.expect(responseJson).to.have.property(key);",
											"    });",
											"",
											"    // Validate data types",
											"    pm.test(\"Field types are correct\", function () {",
											"        pm.expect(responseJson.id).to.be.a(\"number\");",
											"        pm.expect(responseJson.name).to.be.a(\"string\");",
											"        pm.expect(responseJson.value).to.be.a(\"string\");",
											"    });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_two}}/system-variables/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"system-variables",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update-get-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200); // Check that the status code is 200",
											"});",
											" "
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\":\"currency_name\",\n    \"value\":\"Rune\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_two}}/system-variables/1/details/",
									"host": [
										"{{api_gateway_two}}"
									],
									"path": [
										"system-variables",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "ApiGateWayThree",
			"item": [
				{
					"name": "PlayService",
					"item": [
						{
							"name": "player-gacha-collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_three}}/play-service/player/2/collection/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"play-service",
										"player",
										"2",
										"collection",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "roll-to-win",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"// Validate response body structure",
											"pm.test(\"Response contains 'detail' and 'player_gacha' keys\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData).to.have.property(\"detail\");",
											"    pm.expect(jsonData).to.have.property(\"player_gacha\");",
											"});",
											"",
											"// Validate 'detail' message",
											"pm.test(\"Detail message is correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.detail).to.eql(\"Congratulations! You rolled and won a Gacha!\");",
											"});",
											"",
											"// Validate 'player_gacha' object structure",
											"pm.test(\"Player gacha contains correct keys\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.player_gacha).to.have.property(\"id\");",
											"    pm.expect(jsonData.player_gacha).to.have.property(\"player_id\");",
											"    pm.expect(jsonData.player_gacha).to.have.property(\"gacha_id\");",
											"    pm.expect(jsonData.player_gacha).to.have.property(\"created_at\");",
											"});",
											"",
											"// Validate 'player_gacha' object values",
											"pm.test(\"Player gacha values are correct\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.player_gacha.id).to.be.a(\"number\");",
											"    pm.expect(jsonData.player_gacha.player_id).to.eql(5); // Replace with expected player_id",
											"    pm.expect(jsonData.player_gacha.gacha_id).to.eql(2); // Replace with expected gacha_id",
											"    pm.expect(new Date(jsonData.player_gacha.created_at)).to.be.a(\"date\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"roll_price\":\"45\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_three}}/play-service/roll-to-win/?player_id=2",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"play-service",
										"roll-to-win",
										""
									],
									"query": [
										{
											"key": "player_id",
											"value": "2"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "direct-purchase",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{api_gateway_three}}/play-service/direct-purchase/?player_id=1&gacha_id=1",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"play-service",
										"direct-purchase",
										""
									],
									"query": [
										{
											"key": "player_id",
											"value": "1"
										},
										{
											"key": "gacha_id",
											"value": "1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "player-single-gacha-details Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_three}}/play-service/player/collection/4/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"play-service",
										"player",
										"collection",
										"4",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "AuctionService",
					"item": [
						{
							"name": "Gachas",
							"item": [
								{
									"name": "Bids",
									"item": [
										{
											"name": "bid for a gacha",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Validate response status code",
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"price\":110\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{api_gateway_three}}/auction-service/gachas/1/player/1/bid/",
													"host": [
														"{{api_gateway_three}}"
													],
													"path": [
														"auction-service",
														"gachas",
														"1",
														"player",
														"1",
														"bid",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "list of bids",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Validate response status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{api_gateway_three}}/auction-service/gachas/1/bids/",
													"host": [
														"{{api_gateway_three}}"
													],
													"path": [
														"auction-service",
														"gachas",
														"1",
														"bids",
														""
													]
												}
											},
											"response": []
										},
										{
											"name": "winner",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Validate response status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{api_gateway_three}}/auction-service/gachas/1/bids/winner/",
													"host": [
														"{{api_gateway_three}}"
													],
													"path": [
														"auction-service",
														"gachas",
														"1",
														"bids",
														"winner",
														""
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Place gacha for auction",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate response status code",
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"// Validate response body structure",
													"pm.test(\"Response contains 'detail' and 'auction_gacha' keys\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData).to.have.property(\"detail\");",
													"    pm.expect(jsonData).to.have.property(\"auction_gacha\");",
													"});",
													"",
													"// Validate 'detail' message",
													"pm.test(\"Detail message is correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.detail).to.eql(\"Gacha successfully placed for auction.\");",
													"});",
													"",
													"// Validate 'auction_gacha' object structure",
													"pm.test(\"Auction gacha contains correct keys\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.auction_gacha).to.have.property(\"id\");",
													"    pm.expect(jsonData.auction_gacha).to.have.property(\"auction_id\");",
													"    pm.expect(jsonData.auction_gacha).to.have.property(\"collection_id\");",
													"    pm.expect(jsonData.auction_gacha).to.have.property(\"price\");",
													"    pm.expect(jsonData.auction_gacha).to.have.property(\"status\");",
													"});",
													"",
													"// Validate 'auction_gacha' object values",
													"pm.test(\"Auction gacha values are correct\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.auction_gacha.id).to.be.a(\"number\");",
													"    pm.expect(jsonData.auction_gacha.auction_id).to.eql(2); // Replace with expected auction_id",
													"    pm.expect(jsonData.auction_gacha.collection_id).to.eql(20); // Replace with expected collection_id",
													"    pm.expect(jsonData.auction_gacha.price).to.eql(100.0); // Replace with expected price",
													"    pm.expect(jsonData.auction_gacha.status).to.eql(\"active\"); // Replace with expected status",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"auction_id\":1,\n    \"collection_id\":4,\n    \"price\":100,\n    \"status\":\"active\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{api_gateway_three}}/auction-service/gachas/place/",
											"host": [
												"{{api_gateway_three}}"
											],
											"path": [
												"auction-service",
												"gachas",
												"place",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Auction Gachas",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate response status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_gateway_three}}/auction-service/gachas/1/list/",
											"host": [
												"{{api_gateway_three}}"
											],
											"path": [
												"auction-service",
												"gachas",
												"1",
												"list",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "auction gacha details",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate response status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{api_gateway_three}}/auction-service/gachas/1/details/",
											"host": [
												"{{api_gateway_three}}"
											],
											"path": [
												"auction-service",
												"gachas",
												"1",
												"details",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "create-auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Black Friday Sell\",\n    \"start_date\": \"2024-11-11T00:00:00Z\",\n    \"end_date\": \"2024-11-11T00:00:00Z\",\n    \"status\": \"inactive\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_three}}/auction-service/auction/create/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"auction-service",
										"auction",
										"create",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "list-auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_three}}/auction-service/auction/list/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"auction-service",
										"auction",
										"list",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "auction-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has required attributes\", function () {",
											"    const jsonData = pm.response.json();",
											"    // Validate attributes",
											"    pm.expect(jsonData).to.have.property(\"id\");",
											"    pm.expect(jsonData).to.have.property(\"name\");",
											"    pm.expect(jsonData).to.have.property(\"start_date\");",
											"    pm.expect(jsonData).to.have.property(\"end_date\");",
											"    pm.expect(jsonData).to.have.property(\"status\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_three}}/auction-service/auction/1/details/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"auction-service",
										"auction",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "delete-auction-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", function () {",
											"    pm.response.to.have.status(204);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{api_gateway_three}}/auction-service/auction/2/details/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"auction-service",
										"auction",
										"2",
										"details",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "update-auction-details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response has the correct detail message\", function () {",
											"    const jsonData = pm.response.json();",
											"",
											"    // Validate the detail attribute and its value",
											"    pm.expect(jsonData).to.have.property(\"detail\");",
											"    pm.expect(jsonData.detail).to.equal(\"Auction updated successfully.\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": 1,\n    \"name\": \"Black Friday Sell\",\n    \"start_date\": \"2024-11-11T00:00:00Z\",\n    \"end_date\": \"2024-11-11T00:00:00Z\",\n    \"status\": \"active\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_gateway_three}}/auction-service/auction/1/details/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"auction-service",
										"auction",
										"1",
										"details",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "TransactionService",
					"item": [
						{
							"name": "player transactions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_gateway_three}}/transaction-service/player/3/all/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"transaction-service",
										"player",
										"3",
										"all",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "purchase game currency",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "cash_amount",
											"value": "20",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_gateway_three}}/transaction-service/player/4/purchase/game-currency/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"transaction-service",
										"player",
										"4",
										"purchase",
										"game-currency",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "auction winner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Validate response status code",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "auction_gacha_id",
											"value": "2",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{api_gateway_three}}/transaction-service/auction/winner/declare/",
									"host": [
										"{{api_gateway_three}}"
									],
									"path": [
										"transaction-service",
										"auction",
										"winner",
										"declare",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_gateway_one",
			"value": "http://localhost:8001/api/v1",
			"type": "string"
		},
		{
			"key": "api_gateway_two",
			"value": "http://localhost:8002/api/v2",
			"type": "string"
		},
		{
			"key": "api_gateway_three",
			"value": "http://localhost:8003/api/v3",
			"type": "string"
		}
	]
}