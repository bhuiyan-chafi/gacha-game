services:
  db_service:
    image: mysql:latest
    container_name: dbservice
    env_file:
      - .env
    volumes:
      - gacha_db:/var/lib/mysql
      - ./MySqlTest/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $DATABASE_USER --password=$DATABASE_PASSWORD || exit 1"]
      interval: 20s
      timeout: 10s
      retries: 5
    networks:
      - app_network

  dbm_one:
    build: ./DbmOneTest
    container_name: dbmone
    volumes:
      - ./DbmOneTest:/app
    depends_on:
      db_service:
        condition: service_healthy
    networks:
      - app_network
    command: ["python", "manage.py", "test"]

  dbm_two:
    build: ./DbmTwoTest
    container_name: dbmtwo
    volumes:
      - ./DbmTwoTest:/app
    depends_on:
      db_service:
        condition: service_healthy
    networks:
      - app_network
    command: ["python", "manage.py", "test"]

  dbm_three:
    build: ./DbmThreeTest
    container_name: dbmthree
    volumes:
      - ./DbmThreeTest:/app
    depends_on:
      db_service:
        condition: service_healthy
    networks:
      - app_network
    command: ["python", "manage.py", "test"]

  auth_service:
    build: ./AuthServiceTest
    container_name: authservice
    volumes:
      - ./AuthServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      dbm_one:
        condition: service_started
    networks:
      - app_network

  user_service:
    build: ./UserServiceTest
    container_name: userservice
    volumes:
      - ./UserServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      dbm_two:
        condition: service_started
    networks:
      - app_network

  gacha_service:
    build: ./GachaServiceTest
    container_name: gachaservice
    volumes:
      - ./GachaServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      dbm_two:
        condition: service_started
      user_service:
        condition: service_started
    networks:
      - app_network

  play_service:
    build: ./PlayServiceTest
    container_name: playservice
    volumes:
      - ./PlayServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      gacha_service:
        condition: service_started
      dbm_three:
        condition: service_started
    networks:
      - app_network

  auction_service:
    build: ./AuctionServiceTest
    container_name: auctionservice
    volumes:
      - ./AuctionServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      dbm_three:
        condition: service_started
      play_service:
        condition: service_started
      gacha_service:
        condition: service_started
    networks:
      - app_network

  transaction_service:
    build: ./TransactionServiceTest
    container_name: transactionservice
    volumes:
      - ./TransactionServiceTest:/app
    depends_on:
      db_service:
        condition: service_healthy
      dbm_three:
        condition: service_started
      play_service:
        condition: service_started
      auction_service:
        condition: service_started
    networks:
      - app_network

  gateway_one:
    build: ./ApiGatewayOneTest
    container_name: gatewayone
    volumes:
      - ./ApiGatewayOneTest:/app
    depends_on:
      auth_service:
        condition: service_started
    ports:
      - 8001:8000
    networks:
      - app_network

  gateway_two:
    build: ./ApiGatewayTwoTest
    container_name: gatewaytwo
    volumes:
      - ./ApiGatewayTwoTest:/app
    depends_on:
      user_service:
        condition: service_started
      gacha_service:
        condition: service_started
    ports:
      - 8002:8000
    networks:
      - app_network

volumes:
  gacha_db:

networks:
  app_network:
    name: gachafinaldockered_app_network